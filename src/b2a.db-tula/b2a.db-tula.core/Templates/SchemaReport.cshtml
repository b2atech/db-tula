@using b2a.db_tula.core.Models
@model List<ComparisonResult>

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Schema Comparison Report</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.0/styles/default.min.css" rel="stylesheet" />
    <style>
        .mismatch {
            background-color: #fff3cd;
        }

        .missing {
            background-color: #f8d7da;
        }

        .copy-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            z-index: 2;
        }

        .code-block {
            position: relative;
        }

            .code-block pre {
                max-width: 100%;
                overflow-x: auto;
                background-color: #f8f9fa;
                padding: 0.75rem;
                border-radius: 0.25rem;
            }
    </style>
</head>
<body class="container my-4">
    <h1>Schema Comparison Report</h1>

    <div class="d-flex justify-content-between align-items-center mb-3 flex-wrap gap-2">
        <div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="checkbox" id="mismatchOnly" onchange="applyFilters()">
                <label class="form-check-label" for="mismatchOnly">Show only mismatches</label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="checkbox" id="missingSourceOnly" onchange="applyFilters()">
                <label class="form-check-label" for="missingSourceOnly">Missing in source</label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="checkbox" id="missingTargetOnly" onchange="applyFilters()">
                <label class="form-check-label" for="missingTargetOnly">Missing in target</label>
            </div>

        </div>
        <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#syncScriptModal">
            Show All Sync Scripts
        </button>
    </div>

    <table class="table table-bordered table-striped align-middle">
        <thead class="table-light">
            <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Column Count</th>
                <th>Primary Keys</th>
                <th>Foreign Keys</th>
                <th>Indexes</th>
                <th>Source</th>
                <th>Destination</th>
                <th>Comparison</th>
                <th>Details</th>
            </tr>
        </thead>
        <tbody>
            @{
                var idCounter = 0;
                var allSyncScripts = new System.Text.StringBuilder();
            }
            @foreach (var item in Model)
            {
                var rowClass = item.Comparison switch
                {
                    ComparisonType.Same => "",
                    ComparisonType.Changed => "mismatch",
                    ComparisonType.MissingInTarget or ComparisonType.MissingInSource or ComparisonType.ExtraInTarget => "missing",
                    _ => ""
                };

                var columnCount = item.Type == "Table" ? item.ColumnComparisonResults?.Count.ToString() ?? "0" : "-";
                var pkText = item.PrimaryKeyComparisonResults?.Any(r => r.Comparison != ComparisonType.Same) == true
                ? $"{item.PrimaryKeyComparisonResults.Count(r => r.Comparison != ComparisonType.Same)} issue(s)"
                : "OK";
                var fkText = item.ForeignKeyComparisonResults?.Any(r => r.Comparison != ComparisonType.Same) == true
                ? $"{item.ForeignKeyComparisonResults.Count(r => r.Comparison != ComparisonType.Same)} issue(s)"
                : "OK";
                var idxText = item.IndexComparisonResults?.Any(r => r.Comparison != ComparisonType.Same) == true
                ? $"{item.IndexComparisonResults.Count(r => r.Comparison != ComparisonType.Same)} issue(s)"
                : "OK";

                var sourceState = item.Comparison == ComparisonType.MissingInSource ? "Missing" : "Present";
                var targetState = item.Comparison == ComparisonType.MissingInTarget ? "Missing" : "Present";

                if (item.Comparison == ComparisonType.Same || item.Comparison == ComparisonType.Changed)
                {
                    sourceState = "Present";
                    targetState = "Present";
                }

                <tr class="@rowClass" data-comparison="@item.Comparison.ToString()">
                    <td>@item.Type</td>
                    <td>@(item.SourceName ?? item.DestinationName)</td>
                    <td>@columnCount</td>
                    <td>@pkText</td>
                    <td>@fkText</td>
                    <td>@idxText</td>
                    <td>@sourceState</td>
                    <td>@targetState</td>
                    <td>@item.Comparison.ToString().Replace("In", " in ")</td>
                    <td>
                        <details>
                            <summary>View Details</summary>
                            <div class="mt-2">

                                @if (item.ColumnComparisonResults?.Any() == true)
                                {
                                    <strong>Column Differences:</strong>
                                    <ul>
                                        @foreach (var col in item.ColumnComparisonResults)
                                        {
                                            <li>
                                                @(col.SourceName ?? col.DestinationName) — @col.Comparison
                                                @if (!string.IsNullOrWhiteSpace(col.SourceType) || !string.IsNullOrWhiteSpace(col.DestinationType))
                                                {
                                                    <text> (Type: @col.SourceType → @col.DestinationType)</text>
                                                }
                                            </li>
                                        }
                                    </ul>
                                }

                                @if (item.PrimaryKeyComparisonResults?.Any(r => r.Comparison != ComparisonType.Same) == true)
                                {
                                    <strong>Primary Keys:</strong>
                                    <ul>
                                        @foreach (var pk in item.PrimaryKeyComparisonResults.Where(r => r.Comparison != ComparisonType.Same))
                                        {
                                            <li>@(pk.SourceName ?? pk.DestinationName) — @pk.Comparison</li>
                                        }
                                    </ul>
                                }

                                @if (item.ForeignKeyComparisonResults?.Any(r => r.Comparison != ComparisonType.Same) == true)
                                {
                                    <strong>Foreign Keys:</strong>
                                    <ul>
                                        @foreach (var fk in item.ForeignKeyComparisonResults.Where(r => r.Comparison != ComparisonType.Same))
                                        {
                                            <li>@(fk.SourceName ?? fk.DestinationName) — @fk.Comparison</li>
                                        }
                                    </ul>
                                }

                                @if (item.IndexComparisonResults?.Any(r => r.Comparison != ComparisonType.Same) == true)
                                {
                                    <strong>Indexes:</strong>
                                    <ul>
                                        @foreach (var idx in item.IndexComparisonResults.Where(r => r.Comparison != ComparisonType.Same))
                                        {
                                            <li>@(idx.SourceName ?? idx.DestinationName) — @idx.Comparison</li>
                                        }
                                    </ul>
                                }

                                @if (item.SourceDefinition != null || item.DestinationDefinition != null || !string.IsNullOrWhiteSpace(item.SyncScript))
                                {
                                    var defId = $"code-block-{idCounter++}";
                                    var combinedScript = (item.SourceDefinition?.CreateScript + "\n" + item.DestinationDefinition?.CreateScript  + "\n" + item.SyncScript )?.Trim();
                                    var encodedScript = HtmlEncoder.Encode(combinedScript);

                                    <div class="code-block mt-2">
                                        <button class="btn btn-sm btn-outline-secondary copy-btn" onclick="copyToClipboard('@defId')">Copy</button>
                                        <pre class="overflow-auto">
                                        <code class="language-sql hljs" id="@defId">@combinedScript</code>
                                        </pre>
                                    </div>
                                }
                            </div>
                        </details>
                    </td>
                </tr>

                if (!string.IsNullOrWhiteSpace(item.SyncScript))
                {
                    allSyncScripts.AppendLine($"-- {item.Type}: {item.SourceName ?? item.DestinationName}");
                    allSyncScripts.AppendLine(item.SyncScript.Trim());
                    allSyncScripts.AppendLine();
                }
            }
        </tbody>
    </table>

    @if (allSyncScripts.Length > 0)
    {
        var scriptBlockId = "sync-all-script";
        <div class="modal fade" id="syncScriptModal" tabindex="-1" aria-labelledby="syncScriptModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-xl modal-dialog-scrollable">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="syncScriptModalLabel">All Sync Scripts</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="code-block">
                            <button class="btn btn-sm btn-primary copy-btn" onclick="copyToClipboard('@scriptBlockId')">Copy All</button>
                            <pre><code class="language-sql" id="@scriptBlockId">@allSyncScripts.ToString()</code></pre>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.0/highlight.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            hljs.highlightAll();
        });

              function applyFilters() {
            const mismatch = document.getElementById('mismatchOnly').checked;
            const missingSource = document.getElementById('missingSourceOnly').checked;
            const missingTarget = document.getElementById('missingTargetOnly').checked;

            const rows = document.querySelectorAll('table tbody tr[data-comparison]');

            rows.forEach(row => {
                const comparison = row.dataset.comparison;

                const isMismatch = comparison !== 'Same';
                const isMissingSource = comparison === 'MissingInSource';
                const isMissingTarget = comparison === 'MissingInTarget';

                // No filters selected → show all
                if (!mismatch && !missingSource && !missingTarget) {
                    row.style.display = '';
                    return;
                }

                // Apply active filters
                const shouldShow =
                    (mismatch && isMismatch) ||
                    (missingSource && isMissingSource) ||
                    (missingTarget && isMissingTarget);

                row.style.display = shouldShow ? '' : 'none';
            });
        }


        function copyToClipboard(id) {
            const el = document.getElementById(id);
            navigator.clipboard.writeText(el.innerText).then(() => alert('Copied to clipboard'));
        }
    </script>
</body>
</html>
